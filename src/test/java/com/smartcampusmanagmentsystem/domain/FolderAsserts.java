package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FolderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFolderAllPropertiesEquals(Folder expected, Folder actual) {
        assertFolderAutoGeneratedPropertiesEquals(expected, actual);
        assertFolderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFolderAllUpdatablePropertiesEquals(Folder expected, Folder actual) {
        assertFolderUpdatableFieldsEquals(expected, actual);
        assertFolderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFolderAutoGeneratedPropertiesEquals(Folder expected, Folder actual) {
        assertThat(actual)
            .as("Verify Folder auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFolderUpdatableFieldsEquals(Folder expected, Folder actual) {
        assertThat(actual)
            .as("Verify Folder relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getContents()).as("check contents").isEqualTo(expected.getContents()))
            .satisfies(a -> assertThat(a.getCourseId()).as("check courseId").isEqualTo(expected.getCourseId()))
            .satisfies(a -> assertThat(a.getCourse()).as("check course").isEqualTo(expected.getCourse()))
            .satisfies(a -> assertThat(a.getSemester()).as("check semester").isEqualTo(expected.getSemester()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getModifiedAt()).as("check modifiedAt").isEqualTo(expected.getModifiedAt()))
            .satisfies(a -> assertThat(a.getParentId()).as("check parentId").isEqualTo(expected.getParentId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFolderUpdatableRelationshipsEquals(Folder expected, Folder actual) {
        // empty method
    }
}
