package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AttendenceStudentsRecordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceStudentsRecordAllPropertiesEquals(
        AttendenceStudentsRecord expected,
        AttendenceStudentsRecord actual
    ) {
        assertAttendenceStudentsRecordAutoGeneratedPropertiesEquals(expected, actual);
        assertAttendenceStudentsRecordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceStudentsRecordAllUpdatablePropertiesEquals(
        AttendenceStudentsRecord expected,
        AttendenceStudentsRecord actual
    ) {
        assertAttendenceStudentsRecordUpdatableFieldsEquals(expected, actual);
        assertAttendenceStudentsRecordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceStudentsRecordAutoGeneratedPropertiesEquals(
        AttendenceStudentsRecord expected,
        AttendenceStudentsRecord actual
    ) {
        assertThat(actual)
            .as("Verify AttendenceStudentsRecord auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceStudentsRecordUpdatableFieldsEquals(
        AttendenceStudentsRecord expected,
        AttendenceStudentsRecord actual
    ) {
        assertThat(actual)
            .as("Verify AttendenceStudentsRecord relevant properties")
            .satisfies(a -> assertThat(a.getAttendenceId()).as("check attendenceId").isEqualTo(expected.getAttendenceId()))
            .satisfies(a -> assertThat(a.getStudentId()).as("check studentId").isEqualTo(expected.getStudentId()))
            .satisfies(a -> assertThat(a.getStudentName()).as("check studentName").isEqualTo(expected.getStudentName()))
            .satisfies(a -> assertThat(a.getIsPresent()).as("check isPresent").isEqualTo(expected.getIsPresent()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceStudentsRecordUpdatableRelationshipsEquals(
        AttendenceStudentsRecord expected,
        AttendenceStudentsRecord actual
    ) {
        // empty method
    }
}
