package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AttendenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceAllPropertiesEquals(Attendence expected, Attendence actual) {
        assertAttendenceAutoGeneratedPropertiesEquals(expected, actual);
        assertAttendenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceAllUpdatablePropertiesEquals(Attendence expected, Attendence actual) {
        assertAttendenceUpdatableFieldsEquals(expected, actual);
        assertAttendenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceAutoGeneratedPropertiesEquals(Attendence expected, Attendence actual) {
        assertThat(actual)
            .as("Verify Attendence auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceUpdatableFieldsEquals(Attendence expected, Attendence actual) {
        assertThat(actual)
            .as("Verify Attendence relevant properties")
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getCourseId()).as("check courseId").isEqualTo(expected.getCourseId()))
            .satisfies(a -> assertThat(a.getCourseName()).as("check courseName").isEqualTo(expected.getCourseName()))
            .satisfies(a -> assertThat(a.getInstructorId()).as("check instructorId").isEqualTo(expected.getInstructorId()))
            .satisfies(a -> assertThat(a.getInstructorName()).as("check instructorName").isEqualTo(expected.getInstructorName()))
            .satisfies(a -> assertThat(a.getModuleId()).as("check moduleId").isEqualTo(expected.getModuleId()))
            .satisfies(a -> assertThat(a.getModuleName()).as("check moduleName").isEqualTo(expected.getModuleName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAttendenceUpdatableRelationshipsEquals(Attendence expected, Attendence actual) {
        // empty method
    }
}
