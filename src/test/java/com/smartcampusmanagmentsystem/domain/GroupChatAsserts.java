package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GroupChatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupChatAllPropertiesEquals(GroupChat expected, GroupChat actual) {
        assertGroupChatAutoGeneratedPropertiesEquals(expected, actual);
        assertGroupChatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupChatAllUpdatablePropertiesEquals(GroupChat expected, GroupChat actual) {
        assertGroupChatUpdatableFieldsEquals(expected, actual);
        assertGroupChatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupChatAutoGeneratedPropertiesEquals(GroupChat expected, GroupChat actual) {
        assertThat(actual)
            .as("Verify GroupChat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupChatUpdatableFieldsEquals(GroupChat expected, GroupChat actual) {
        assertThat(actual)
            .as("Verify GroupChat relevant properties")
            .satisfies(a -> assertThat(a.getUnreadCount()).as("check unreadCount").isEqualTo(expected.getUnreadCount()))
            .satisfies(a -> assertThat(a.getMuted()).as("check muted").isEqualTo(expected.getMuted()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getOwner()).as("check owner").isEqualTo(expected.getOwner()))
            .satisfies(a -> assertThat(a.getOwnerName()).as("check ownerName").isEqualTo(expected.getOwnerName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroupChatUpdatableRelationshipsEquals(GroupChat expected, GroupChat actual) {
        // empty method
    }
}
