package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CampusEventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampusEventAllPropertiesEquals(CampusEvent expected, CampusEvent actual) {
        assertCampusEventAutoGeneratedPropertiesEquals(expected, actual);
        assertCampusEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampusEventAllUpdatablePropertiesEquals(CampusEvent expected, CampusEvent actual) {
        assertCampusEventUpdatableFieldsEquals(expected, actual);
        assertCampusEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampusEventAutoGeneratedPropertiesEquals(CampusEvent expected, CampusEvent actual) {
        assertThat(actual)
            .as("Verify CampusEvent auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampusEventUpdatableFieldsEquals(CampusEvent expected, CampusEvent actual) {
        assertThat(actual)
            .as("Verify CampusEvent relevant properties")
            .satisfies(a -> assertThat(a.getEventName()).as("check eventName").isEqualTo(expected.getEventName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getEventDate()).as("check eventDate").isEqualTo(expected.getEventDate()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getOrganizerId()).as("check organizerId").isEqualTo(expected.getOrganizerId()))
            .satisfies(a -> assertThat(a.getEventType()).as("check eventType").isEqualTo(expected.getEventType()))
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCampusEventUpdatableRelationshipsEquals(CampusEvent expected, CampusEvent actual) {
        // empty method
    }
}
