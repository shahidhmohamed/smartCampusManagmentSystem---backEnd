package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ChatUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatUserAllPropertiesEquals(ChatUser expected, ChatUser actual) {
        assertChatUserAutoGeneratedPropertiesEquals(expected, actual);
        assertChatUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatUserAllUpdatablePropertiesEquals(ChatUser expected, ChatUser actual) {
        assertChatUserUpdatableFieldsEquals(expected, actual);
        assertChatUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatUserAutoGeneratedPropertiesEquals(ChatUser expected, ChatUser actual) {
        assertThat(actual)
            .as("Verify ChatUser auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatUserUpdatableFieldsEquals(ChatUser expected, ChatUser actual) {
        assertThat(actual)
            .as("Verify ChatUser relevant properties")
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getAvatar()).as("check avatar").isEqualTo(expected.getAvatar()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAbout()).as("check about").isEqualTo(expected.getAbout()))
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getBirthday()).as("check birthday").isEqualTo(expected.getBirthday()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertChatUserUpdatableRelationshipsEquals(ChatUser expected, ChatUser actual) {
        // empty method
    }
}
