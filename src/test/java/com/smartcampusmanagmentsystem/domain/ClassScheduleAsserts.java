package com.smartcampusmanagmentsystem.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClassScheduleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassScheduleAllPropertiesEquals(ClassSchedule expected, ClassSchedule actual) {
        assertClassScheduleAutoGeneratedPropertiesEquals(expected, actual);
        assertClassScheduleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassScheduleAllUpdatablePropertiesEquals(ClassSchedule expected, ClassSchedule actual) {
        assertClassScheduleUpdatableFieldsEquals(expected, actual);
        assertClassScheduleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassScheduleAutoGeneratedPropertiesEquals(ClassSchedule expected, ClassSchedule actual) {
        assertThat(actual)
            .as("Verify ClassSchedule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassScheduleUpdatableFieldsEquals(ClassSchedule expected, ClassSchedule actual) {
        assertThat(actual)
            .as("Verify ClassSchedule relevant properties")
            .satisfies(a -> assertThat(a.getCourseId()).as("check courseId").isEqualTo(expected.getCourseId()))
            .satisfies(a -> assertThat(a.getModuleId()).as("check moduleId").isEqualTo(expected.getModuleId()))
            .satisfies(a -> assertThat(a.getInstructorId()).as("check instructorId").isEqualTo(expected.getInstructorId()))
            .satisfies(a -> assertThat(a.getScheduleDate()).as("check scheduleDate").isEqualTo(expected.getScheduleDate()))
            .satisfies(a -> assertThat(a.getScheduleTimeFrom()).as("check scheduleTimeFrom").isEqualTo(expected.getScheduleTimeFrom()))
            .satisfies(a -> assertThat(a.getScheduleTimeTo()).as("check scheduleTimeTo").isEqualTo(expected.getScheduleTimeTo()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClassScheduleUpdatableRelationshipsEquals(ClassSchedule expected, ClassSchedule actual) {
        // empty method
    }
}
